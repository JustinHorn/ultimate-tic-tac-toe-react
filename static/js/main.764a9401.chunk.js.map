{"version":3,"sources":["components/Square.js","components/Game.js","components/Board.js","components/CountDown.js","components/GameSideBar.js","components/webworker/index.js","components/SettingsForm.js","App.js","serviceWorker.js","index.js","components/PlayerSettings.js","components/AI.js","components/util/Field.js","components/util/GameUtil.js"],"names":["squareColors","Square","props","style","display","value","color","winner","background","clickable","className","onClick","gamestartStats","squares","Array","fill","localWinners","activeFields","xIsNext","size","Game","state","workerApi","undefined","workers","getAIMove","t","type","removeWorkers","getWorker","doMove","move","w","noUpdateOccured","Error","handleClick","id","getIdWorkerId","getRandomMove","then","time","players","aiP1T","aiP2T","getMonteCarloMove","push","indexOf","worker","Worker","name","wrap","getPlayer","setPlayer","setState","onPlayerChange","nextData","Field","getNextData","prevState","renderBoard","i","key","p","getMove","handleAI","getMoves","length","p1","p2","timeOver","player","humanVsHuman","this","callBackPlayer","Grid","render","renderInfo","clock","Component","generateGridNxN","Board","renderSquare","bind","React","CountDown","elapsed","tick","dt","Date","lastTick","seconds","timeOverCallback","clearInterval","timer","setInterval","remaining","Math","floor","minutes","isPaused","pause","resume","slice","GameSidebar","status","calc3x3","console","log","setStatus","timerXPaused","Boolean","timerOPaused","getClock","module","exports","SettingsForm","defaults","defaultValues","boardSize","handleChange","handleSubmit","event","target","handleTarget","checked","submitCallback","preventDefault","Button","Checkbox","label","onChange","a","b","Input","max","min","defaultSettings","App","defaultPlayers","matchID","newGame","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","ready","unregister","reload","checkValidServiceWorker","dropdownOptions","text","PlayerSettings","handlePlayers","handlePlayerTarget","copy","inline","options","defaultValue","data","items","moves","random","forEach","field","outer_idx","x","inner_idx","map","tree","hasChildren","dataIsOver","Results","VICTORY","DEFEAT","DRAW","o","matches","winCombinations","charAt","calcWinner","generatorFunction","rows","cols","j"],"mappings":"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","file":"static/js/main.764a9401.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const squareColors = {\r\n  X: \"#fc7341\",\r\n  O: \"#2db2e2\",\r\n  WINNER_X: \"#ffccb5\",\r\n  WINNER_O: \"#dbf5ff\",\r\n  DRAW: \"#F0F8FF\",\r\n  CLICKABLE: \"#e2ffec\",\r\n};\r\n\r\nexport default function Square(props) {\r\n  var style = { display: \"inline-block\" };\r\n  if (props.value) {\r\n    style.color = props.value === \"X\" ? squareColors.X : squareColors.O;\r\n  }\r\n  if (props.winner) {\r\n    if (props.winner === \"X\") {\r\n      style.background = squareColors.WINNER_X;\r\n    } else if (props.winner === \"O\") {\r\n      style.background = squareColors.WINNER_O;\r\n    } else {\r\n      style.background = squareColors.DRAW;\r\n    }\r\n  }\r\n  if (props.clickable) {\r\n    style.background = squareColors.CLICKABLE;\r\n  }\r\n  return (\r\n    <button\r\n      className=\"square\"\r\n      style={style}\r\n      onClick={() => {\r\n        if (props.clickable) {\r\n          props.onClick();\r\n        }\r\n      }}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nlet lastId = 0;\r\n\r\nconst uniqueid = (prefix = \"id\") => {\r\n  return `${lastId++}`;\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nimport Board from \"./Board.js\";\r\nimport generateGridNxN from \"./util/GameUtil.js\";\r\nimport Field from \"./util/Field\";\r\nimport { humanVsHuman } from \"./PlayerSettings\";\r\n\r\nimport { wrap } from \"comlink\";\r\n\r\nimport GameSidebar from \"./GameSideBar\";\r\n\r\nimport PlayerSettings from \"./PlayerSettings\";\r\n\r\nexport const gamestartStats = {\r\n  squares: Array(3 * 3).fill(\r\n    // Outer squares\r\n    Array(3 * 3).fill(null)\r\n  ), // Inner squares\r\n  localWinners: Array(3 * 3).fill(null),\r\n  activeFields: Array(9).fill(true),\r\n  xIsNext: true,\r\n  winner: null,\r\n  size: 3,\r\n};\r\n\r\nexport default class Game extends Component {\r\n  state = {\r\n    ...gamestartStats,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    if (props.players) {\r\n      this.state.players = props.players;\r\n    } else {\r\n      this.state.players = humanVsHuman;\r\n    }\r\n  }\r\n\r\n  workerApi = undefined;\r\n  workers = [0];\r\n\r\n  getAIMove = (t, type) => {\r\n    this.removeWorkers();\r\n\r\n    this.getWorker();\r\n    const doMove = (move, w) => {\r\n      if (this.noUpdateOccured(w)) {\r\n        if (move) {\r\n          t.handleClick(move);\r\n        } else {\r\n          throw Error(\"move is undefined: \" + move);\r\n        }\r\n      }\r\n    };\r\n    let id = this.getIdWorkerId();\r\n    if (type === \"rAI\") {\r\n      this.workerApi.getRandomMove(t.state).then((move) => {\r\n        doMove(move, id);\r\n      });\r\n    } else if (type === \"AI\") {\r\n      let time = t.state.xIsNext\r\n        ? this.state.players.aiP1T\r\n        : this.state.players.aiP2T;\r\n      time = time * 1000;\r\n      this.workerApi.getMonteCarloMove(t.state, time).then((move) => {\r\n        doMove(move, id);\r\n      });\r\n    }\r\n  };\r\n\r\n  getIdWorkerId = () => {\r\n    let id = this.workers[0] + 1;\r\n    this.workers.push(id);\r\n    this.workers[0] = id + 1;\r\n    return id;\r\n  };\r\n\r\n  noUpdateOccured = (id) => {\r\n    return this.workers.indexOf(id) !== -1;\r\n  };\r\n\r\n  removeWorkers = () => {\r\n    this.workers = [this.workers[0]];\r\n  };\r\n\r\n  getWorker = () => {\r\n    if (!this.workerApi) {\r\n      const worker = new Worker(\"./webworker\", {\r\n        name: \"webworker\",\r\n        type: \"module\",\r\n      });\r\n      this.workerApi = wrap(worker);\r\n    }\r\n  };\r\n\r\n  getPlayer = () => {\r\n    return this.players;\r\n  };\r\n\r\n  setPlayer = (players) => {\r\n    this.setState({ players: { ...players } });\r\n    if (this.props.onPlayerChange) {\r\n      this.props.onPlayerChange(players);\r\n    }\r\n  };\r\n\r\n  handleClick = (move) => {\r\n    if (this.state.winner) {\r\n      return;\r\n    }\r\n    const nextData = Field.getNextData(this.state, move);\r\n\r\n    this.setState((prevState, props) => ({\r\n      ...nextData,\r\n    }));\r\n  };\r\n\r\n  renderBoard = (i) => {\r\n    return (\r\n      <Board\r\n        key={i}\r\n        size={3}\r\n        squares={this.state.squares[i]}\r\n        winner={this.state.localWinners[i]}\r\n        clickable={this.state.activeFields[i]}\r\n        onClick={(p) => this.handleClick(Field.getMove(p, i))}\r\n      />\r\n    );\r\n  };\r\n\r\n  render() {\r\n    this.handleAI();\r\n    const { state } = this;\r\n    return (\r\n      <div>\r\n        <div className=\"Game-Settings\">\r\n          <PlayerSettings\r\n            callBackPlayer={this.setPlayer}\r\n            players={state.players}\r\n          />\r\n        </div>\r\n        <div className=\"game-container\">\r\n          <div className=\"game-row\">\r\n            <Grid render={this.renderBoard} />\r\n          </div>\r\n        </div>\r\n        <br />\r\n        <div className=\"game-container\">\r\n          {this.props.renderInfo && (\r\n            <GameSidebar\r\n              clock={this.props.clock}\r\n              timeOver={this.timeOver}\r\n              time={this.props.time}\r\n              state={state}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleAI = () => {\r\n    const { state } = this;\r\n    if (Field.getMoves(state).length > 0) {\r\n      if (state.xIsNext && state.players.p1 !== \"human\") {\r\n        this.getAIMove(this, state.players.p1);\r\n      } else if (!state.xIsNext && state.players.p2 !== \"human\") {\r\n        this.getAIMove(this, state.players.p2);\r\n      }\r\n    }\r\n  };\r\n\r\n  timeOver = (player) => {\r\n    if (player === \"X\") {\r\n      this.setState({ winner: \"O\" });\r\n    } else {\r\n      this.setState({ winner: \"X\" });\r\n    }\r\n  };\r\n}\r\n\r\nfunction Grid(props) {\r\n  return generateGridNxN(\"game\", 3, props.render);\r\n}\r\n","import React from \"react\";\r\nimport Square from \"./Square.js\";\r\nimport generateGridNxN from \"./util/GameUtil.js\";\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.renderSquare = this.renderSquare.bind(this);\r\n  }\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        winner={this.props.winner}\r\n        clickable={!this.props.squares[i] && this.props.clickable}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return generateGridNxN(\"board\", this.props.size, this.renderSquare);\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class CountDown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.lastTick = null;\r\n  }\r\n\r\n  state = { elapsed: 0 };\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  tick = () => {\r\n    this.setState((prevState, props) => {\r\n      var now = new Date();\r\n      const dt = now - this.lastTick;\r\n      const elapsed = prevState.elapsed + dt;\r\n      // Check if time is over\r\n      const remaining = props.seconds - elapsed / 1000;\r\n      if (remaining < 0.15) {\r\n        props.timeOverCallback(props.player);\r\n      }\r\n      return {\r\n        elapsed: elapsed,\r\n      };\r\n    });\r\n    this.lastTick = new Date();\r\n  };\r\n\r\n  pause() {\r\n    clearInterval(this.timer);\r\n    this.timer = null;\r\n    this.lastTick = null;\r\n  }\r\n\r\n  resume() {\r\n    this.timer = setInterval(this.tick, 1000);\r\n    this.lastTick = new Date();\r\n  }\r\n\r\n  render() {\r\n    const remaining =\r\n      this.props.seconds - Math.floor(this.state.elapsed / 1000);\r\n    const minutes = Math.floor(remaining / 60);\r\n    const seconds = remaining % 60;\r\n\r\n    if (this.props.isPaused) {\r\n      // console.log('Pause!!');\r\n      this.pause();\r\n    } else if (!this.timer) {\r\n      // console.log('Resume!!');\r\n      this.resume();\r\n    }\r\n\r\n    return (\r\n      <p className=\"countdown\">\r\n        {(\"0\" + minutes).slice(-2)}:{(\"0\" + seconds).slice(-2)}\r\n      </p>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport CountDown from \"./CountDown.js\";\r\nimport Field from \"./util/Field\";\r\n\r\nexport default function GameSidebar(props) {\r\n  return (\r\n    <div className=\"game-info\">\r\n      <div id=\"status\">{setStatus(props.state)}</div>\r\n      {props.clock && getClock(props.timeOverCallback, props.time, props.state)}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getClock(timeOverCallback, time, state) {\r\n  const timerXPaused = !state.xIsNext || Boolean(state.winner);\r\n  const timerOPaused = state.xIsNext || Boolean(state.winner);\r\n  return (\r\n    <div>\r\n      [TIME] X:{\" \"}\r\n      <CountDown\r\n        key={1}\r\n        player=\"X\"\r\n        seconds={time * 60}\r\n        isPaused={timerXPaused}\r\n        timeOverCallback={timeOverCallback}\r\n      />\r\n      , O:{\" \"}\r\n      <CountDown\r\n        key={2}\r\n        player=\"O\"\r\n        seconds={time * 60}\r\n        isPaused={timerOPaused}\r\n        timeOverCallback={timeOverCallback}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction setStatus(state) {\r\n  let status;\r\n  if (state.winner) {\r\n    status = state.winner + \" wins!\";\r\n\r\n    if (Field.calc3x3(state.localWinners) === null) {\r\n      status = \"Time over! \" + status;\r\n    }\r\n  } else {\r\n    if (state.localWinners.indexOf(null) === -1) {\r\n      status = \"Draw! Everybody wins!! :D\";\r\n      console.log(state);\r\n    } else {\r\n      status = \"Next player: \" + (state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n  }\r\n  return status;\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/js/webworker.9a88780c.chunk.worker.js\"","import React from \"react\";\r\nimport { Input, Checkbox, Button } from \"semantic-ui-react\";\r\n\r\nexport default class SettingsForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let defaults = this.props.defaultValues;\r\n    this.state = {\r\n      boardSize: 3,\r\n      clock: defaults.clock,\r\n      time: defaults.time,\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    const target = event.target;\r\n    this.handleTarget(target);\r\n  }\r\n\r\n  handleTarget(target) {\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    const name = target.name;\r\n    if (name === \"clock\") {\r\n      console.log(\"Clock: \" + target.value);\r\n    }\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    this.props.submitCallback(this.state.clock, this.state.time);\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form>\r\n        <Button size=\"mini\" onClick={this.handleSubmit}>\r\n          {\" \"}\r\n          new Game\r\n        </Button>\r\n        <label className=\"settings-label\">\r\n          <Checkbox\r\n            label=\"Clock\"\r\n            name=\"clock\"\r\n            type=\"checkbox\"\r\n            onChange={(a, b) => this.handleTarget(b)}\r\n          />\r\n        </label>\r\n        {this.state.clock && (\r\n          <label className=\"settings-label\">\r\n            <Input\r\n              label=\"Time (min)\"\r\n              size=\"mini\"\r\n              name=\"time\"\r\n              type=\"number\"\r\n              max=\"100\"\r\n              min=\"1\"\r\n              value={this.state.time}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n        )}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport SettingsForm from \"./components/SettingsForm.js\";\r\nimport Game from \"./components/Game.js\";\r\nimport { defaultPlayers } from \"./components/PlayerSettings.js\";\r\n\r\nexport const defaultSettings = {\r\n  clock: false,\r\n  time: 10,\r\n};\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      clock: defaultSettings.clock,\r\n      time: defaultSettings.time,\r\n      matchID: 0,\r\n    };\r\n    this.newGame = this.newGame.bind(this);\r\n  }\r\n  players = defaultPlayers;\r\n\r\n  newGame(clock, time) {\r\n    // console.log('New size is ' + size);\r\n    this.setState((prevState, props) => ({\r\n      clock: clock,\r\n      time: time,\r\n      matchID: prevState.matchID + 1,\r\n    }));\r\n  }\r\n\r\n  onPlayerChange = (player) => {\r\n    this.players = player;\r\n  };\r\n\r\n  updatePlayer(players) {}\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"container mt-2\">\r\n          <div className=\"row justify-content-center\">\r\n            <SettingsForm\r\n              defaultValues={this.state}\r\n              submitCallback={this.newGame}\r\n            />\r\n            <br />\r\n          </div>\r\n          <div className=\"row justify-content-center\">\r\n            <Game\r\n              key={this.state.matchID}\r\n              clock={this.state.clock}\r\n              time={this.state.time}\r\n              players={this.players}\r\n              onPlayerChange={this.onPlayerChange}\r\n              renderInfo={true}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App.js\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nserviceWorker.register();\r\n","import React, { Component } from \"react\";\r\nimport { Dropdown, Input } from \"semantic-ui-react\";\r\n\r\nexport const defaultPlayers = {\r\n  p1: \"AI\",\r\n  p2: \"AI\",\r\n  aiP1T: 1,\r\n  aiP2T: 1,\r\n};\r\n\r\nexport const humanVsHuman = {\r\n  p1: \"human\",\r\n  p2: \"human\",\r\n  aiP1T: 1,\r\n  aiP2T: 1,\r\n};\r\n\r\nexport const dropdownOptions = [\r\n  { key: \"h\", value: \"human\", text: \"human\" },\r\n  { key: \"rAI\", value: \"rAI\", text: \"random AI\" },\r\n  { key: \"a\", value: \"AI\", text: \"AI\" },\r\n];\r\n\r\nclass PlayerSettings extends Component {\r\n  state = {\r\n    players: this.props.players, //TODO: change!\r\n    callBackPlayer: this.props.callBackPlayer,\r\n  };\r\n\r\n  handlePlayers = (event) => {\r\n    const target = event.target;\r\n    this.handlePlayerTarget(target);\r\n  };\r\n\r\n  handlePlayerTarget = (name, target) => {\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    let copy = { ...this.state.players };\r\n    copy[name] = value;\r\n    this.setState({ players: copy });\r\n    if (this.state.callBackPlayer) {\r\n      this.state.callBackPlayer(copy);\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        {\" \"}\r\n        <Dropdown\r\n          inline\r\n          options={dropdownOptions}\r\n          name=\"p1\"\r\n          onChange={(a, b) => this.handlePlayerTarget(\"p1\", b)}\r\n          defaultValue={this.state.players.p1}\r\n        />{\" \"}\r\n        vs.{\" \"}\r\n        <Dropdown\r\n          inline\r\n          name=\"p2\"\r\n          options={dropdownOptions}\r\n          defaultValue={this.state.players.p2}\r\n          onChange={(a, b) => this.handlePlayerTarget(\"p2\", b)}\r\n        />\r\n        {this.state.players.p1 === \"AI\" && (\r\n          <label className=\"settings-label\">\r\n            <Input\r\n              label=\"AI player1 time (s)\"\r\n              size=\"mini\"\r\n              name=\"aiP1T\"\r\n              type=\"number\"\r\n              min=\"0.001\"\r\n              max=\"9\"\r\n              value={this.state.players.aiP1T}\r\n              onChange={(a, b) => this.handlePlayerTarget(\"aiP1T\", b)}\r\n            />\r\n          </label>\r\n        )}\r\n        {this.state.players.p2 === \"AI\" && (\r\n          <label className=\"settings-label\">\r\n            <Input\r\n              label=\"AI player2 time (s)\"\r\n              size=\"mini\"\r\n              name=\"aiP2T\"\r\n              min=\"0.001\"\r\n              type=\"number\"\r\n              max=\"9\"\r\n              value={this.state.players.aiP2T}\r\n              onChange={(a, b) => this.handlePlayerTarget(\"aiP2T\", b)}\r\n            />\r\n          </label>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlayerSettings;\r\n","import Field from \"./util/Field\";\r\nimport Tree from \"./util/Tree\";\r\n\r\nexport function getRandomMove(data) {\r\n  const moves = Field.getMoves(data);\r\n  return random_item(moves);\r\n}\r\n\r\nfunction random_item(items) {\r\n  return items[Math.floor(Math.random() * items.length)];\r\n}\r\n\r\nexport function getMonteCarloMove(data, time) {\r\n  const tree = new Tree(data, null, null, Date.now());\r\n  evaluateMoves(tree, time);\r\n  return tree.getMostUsed().move;\r\n}\r\n\r\nfunction evaluateMoves(tree, time) {\r\n  const startTime = Date.now();\r\n  let x = 0;\r\n  while (Date.now() - startTime < time) {\r\n    evaluate(tree);\r\n    x++;\r\n  }\r\n  console.log(\"Simulations: \" + x);\r\n}\r\n\r\nexport function evaluate(tree) {\r\n  while (tree.hasChildren()) {\r\n    tree = tree.getBestNode();\r\n  }\r\n  if (!tree.isOver()) {\r\n    tree.makeChildren();\r\n    tree = tree.getRandomChild();\r\n  }\r\n  let result = Field.propagate(tree);\r\n  tree.update(result);\r\n}\r\n","import { getRandomMove } from \"../AI\";\r\nimport { squareColors } from \"../Square\";\r\n\r\nexport default class Field {\r\n  static getMoves(data) {\r\n    let moves = [];\r\n    data.localWinners.forEach((field, outer_idx) => {\r\n      if (field === null && data.activeFields[outer_idx]) {\r\n        data.squares[outer_idx].forEach((x, inner_idx) => {\r\n          if (x === null) {\r\n            moves.push(Field.getMove(inner_idx, outer_idx));\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return moves;\r\n  }\r\n\r\n  static getNextData(data, move) {\r\n    if (data.xIsNext === undefined) {\r\n      throw Error(\"Data xIsNext is undefined\");\r\n    }\r\n\r\n    let squares = data.squares.map((x) => x.slice());\r\n\r\n    if (!move || squares[move.outer_idx][move.inner_idx]) {\r\n      console.log(\"hello\");\r\n      throw Error(\"field already taken\");\r\n    }\r\n    if (!data.activeFields[move.outer_idx]) {\r\n      throw Error(\"field inactive\");\r\n    }\r\n\r\n    squares[move.outer_idx][move.inner_idx] = data.xIsNext ? \"X\" : \"O\";\r\n    const localWinners = squares.map((x) => Field.calc3x3(x));\r\n    const winner = Field.calc3x3(localWinners);\r\n    let activeFields = data.activeFields.slice();\r\n    if (localWinners[move.inner_idx]) {\r\n      localWinners.forEach((x, i) => (activeFields[i] = x ? false : true));\r\n    } else {\r\n      activeFields = activeFields.map((x, i) => i === move.inner_idx);\r\n    }\r\n\r\n    if (winner) {\r\n      activeFields = Array(9).fill(false);\r\n    }\r\n\r\n    return {\r\n      winner: winner,\r\n      squares: squares,\r\n      localWinners: localWinners,\r\n      activeFields: activeFields,\r\n      xIsNext: !data.xIsNext,\r\n    };\r\n  }\r\n\r\n  static getMove = (i, o) => {\r\n    return { inner_idx: i, outer_idx: o };\r\n  };\r\n\r\n  static calc3x3 = (field) => {\r\n    field = field.map((x) => (x ? x : \" \"));\r\n    var matches = [\"XXX\", \"OOO\"];\r\n\r\n    var winCombinations = [\r\n      field[0] + field[1] + field[2], // 1st line\r\n      field[3] + field[4] + field[5], // 2nd line\r\n      field[6] + field[7] + field[8], // 3rd line\r\n      field[0] + field[3] + field[6], // 1st column\r\n      field[1] + field[4] + field[7], // 2nd column\r\n      field[2] + field[5] + field[8], // 3rd column\r\n      field[0] + field[4] + field[8], // Primary diagonal\r\n      field[2] + field[4] + field[6], // Secondary diagonal\r\n    ];\r\n\r\n    // Loop through all the rows looking for a match\r\n    for (var i = 0; i < winCombinations.length; i++) {\r\n      if (\r\n        winCombinations[i] === matches[0] ||\r\n        winCombinations[i] === matches[1]\r\n      ) {\r\n        return winCombinations[i].charAt(0);\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  static calcWinner = (squares) => {\r\n    return Field.calc3x3(squares.map((x) => Field.calc3x3(x)));\r\n  };\r\n\r\n  static dataIsOver(data) {\r\n    return Field.getMoves(data).length === 0;\r\n  }\r\n\r\n  static propagate(tree) {\r\n    let data = tree.data;\r\n    if (tree.hasChildren()) {\r\n      throw Error(\"Tree shouldn't have children\");\r\n    } else {\r\n      let winner = Field.calc3x3(data.localWinners);\r\n      while (!Field.dataIsOver(data)) {\r\n        data = Field.getNextData(data, getRandomMove(data));\r\n        winner = data.winner;\r\n      }\r\n      if (winner) {\r\n        return winner === (tree.data.xIsNext ? \"O\" : \"X\")\r\n          ? Results.VICTORY\r\n          : Results.DEFEAT;\r\n      } else {\r\n        return Results.DRAW;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const Results = {\r\n  VICTORY: 1,\r\n  DEFEAT: -1,\r\n  DRAW: 0,\r\n};\r\n","import React from \"react\";\r\n\r\n/*\r\n * Generates a grid of NxN elements. Expects 3 parameters:\r\n *\r\n ** className: A class-name for the CSS stylesheet. The global name of the\r\n\tgrid will be equal to the provided className; the name of each row\r\n\twill be equal to className + '-row'.\r\n ** size: The grid's size.\r\n ** generatorFunction: Custom function to create each element. This function\r\n    must take an integer as unique parameter and return a valid React element.\r\n */\r\nexport default function generateGridNxN(className, size, generatorFunction) {\r\n  var rows = [];\r\n  for (let i = 0; i < size; i++) {\r\n    let cols = [];\r\n    for (let j = 0; j < size; j++) {\r\n      cols.push(generatorFunction(i * size + j));\r\n    }\r\n    rows.push(\r\n      <div className={className + \"-row\"} key={i}>\r\n        {cols}\r\n      </div>\r\n    );\r\n  }\r\n  return <div className={className}>{rows}</div>;\r\n}\r\n"],"sourceRoot":""}